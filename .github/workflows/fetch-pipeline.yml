name: Fetch Pipeline

on:
  workflow_dispatch:
  schedule:
    - cron: "5 * * * *"
  push:
    branches: ["main"]

concurrency:
  group: fetch-pipeline
  cancel-in-progress: true

jobs:
  fetch-run:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    permissions:
      contents: read
      actions: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: List repository (debug)
        run: |
          echo "== ROOT FILES =="
          ls -1a .
          echo "== FIRST TWO LEVELS =="
          find . -maxdepth 2 -type f -print | head -n 200

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements*.txt', 'pyproject.toml', 'setup.cfg') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install dependencies (robust)
        run: |
          set -e
          echo "== Installation start =="
          if [ -f requirements-dev.txt ]; then
            echo "[INFO] Using requirements-dev.txt"
            python -m pip install -r requirements-dev.txt
          elif [ -f requirements.txt ]; then
            echo "[INFO] Using requirements.txt"
            python -m pip install -r requirements.txt
            python -m pip install pytest httpx prometheus-client
          else
            echo "[WARN] No requirements files found, installing minimal set"
            python -m pip install fastapi uvicorn pydantic requests prometheus-client pytest httpx
          fi
          echo "== Ensure core test deps =="
          python -m pip install --upgrade pytest httpx prometheus-client
          echo "== Show key packages =="
          python -m pip show pytest || true
          python -m pip show httpx || true
          python -m pip show prometheus-client || true

      - name: Export PYTHONPATH
        run: echo "PYTHONPATH=$PWD/src" >> $GITHUB_ENV

      - name: Smoke import
        env:
          PYTHONPATH: ${{ env.PYTHONPATH }}
        run: |
          python - <<'EOF'
          import sys
          print("sys.executable:", sys.executable)
          print("PYTHONPATH set includes src? ->", any(p.endswith("/src") for p in sys.path))
          import importlib
          try:
              import pytest
              print("pytest version:", pytest.__version__)
          except Exception as e:
              print("FAILED import pytest:", e)
          try:
              import core
              print("core import OK:", core.__file__)
          except Exception as e:
              print("FAILED import core:", e)
          EOF

      - name: Show selected provider scope
        run: |
          echo "DEFAULT_LEAGUE_ID=${{ vars.DEFAULT_LEAGUE_ID }}"
          echo "DEFAULT_SEASON=${{ vars.DEFAULT_SEASON }}"
          echo "BET_DATA_DIR=${{ vars.BET_DATA_DIR }}"

      - name: Run tests
        env:
          PYTHONPATH: ${{ env.PYTHONPATH }}
        run: |
          python -m pytest -q

      - name: Run fetch pipeline
        env:
          PYTHONPATH: ${{ env.PYTHONPATH }}
          API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
          DEFAULT_LEAGUE_ID: ${{ vars.DEFAULT_LEAGUE_ID }}
          DEFAULT_SEASON: ${{ vars.DEFAULT_SEASON }}
          BET_DATA_DIR: ${{ vars.BET_DATA_DIR }}
          ENABLE_ODDS_INGESTION: ${{ vars.ENABLE_ODDS_INGESTION }}
          ENABLE_PREDICTIONS: ${{ vars.ENABLE_PREDICTIONS }}
          ENABLE_PREDICTIONS_USE_ODDS: ${{ vars.ENABLE_PREDICTIONS_USE_ODDS }}
          ENABLE_VALUE_DETECTION: ${{ vars.ENABLE_VALUE_DETECTION }}
          ENABLE_VALUE_ALERTS: ${{ vars.ENABLE_VALUE_ALERTS }}
          ENABLE_ROI_TRACKING: ${{ vars.ENABLE_ROI_TRACKING }}
          ENABLE_VALUE_HISTORY: ${{ vars.ENABLE_VALUE_HISTORY }}
          ROI_MIN_EDGE: ${{ vars.ROI_MIN_EDGE }}
        run: |
          echo "== Running fetch pipeline =="
          python scripts/fetch_fixtures.py
          echo "== Generated data files =="
          find data -maxdepth 4 -type f -print || true

      - name: Show key outputs
        if: always()
        run: |
          for f in \
            data/odds/odds_latest.json \
            data/predictions/latest_predictions.json \
            data/value_alerts/value_alerts.json \
            data/roi/roi_metrics.json; do
            if [ -f "$f" ]; then
              echo "----- $f -----"
              head -n 150 "$f"
            fi
          done

      - name: Upload data artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-data
          path: data
          retention-days: 7
